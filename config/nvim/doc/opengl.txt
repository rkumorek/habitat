==============================================================================
OPENGL                                  *opengl*

Information and quotes from OpenGL 4.1. Core.
Useful links:
- https://registry.khronos.org/OpenGL/specs/gl/glspec41.core.pdf
- https://registry.khronos.org/OpenGL-Refpages/gl4/
- https://docs.gl/
- https://learnopengl.com/Getting-started/Hello-Triangle

------------------------------------------------------------------------------
Vertex Buffer Object                    *opengl:vbo*

Vertex array data are stored in high-performance server memory. GL buffer
objects provide a mechanism that clients can use to allocate, initialize,
and render from such memory.
--- OpenGL 4.1. Core

Available target names for Vertex Buffer Objects:
    ARRAY_BUFFER                Vertex attributes
    COPY_READ_BUFFER            Buffer copy source
    COPY_WRITE_BUFFER           Buffer copy destination
    DRAW_INDIRECT_BUFFER        Indirect command arguments
    ELEMENT_ARRAY_BUFFER        Vertex array indices
    PIXEL_PACK_BUFFER           Pixel read target
    PIXEL_UNPACK_BUFFER         Texture data source
    TEXTURE_BUFFER              Texture data buffer
    TRANSFORM_FEEDBACK_BUFFER   Transform feedback buffer
    UNIFORM_BUFFER              Uniform block storage

Create and bind:
>c
    GLuint vbo;
    GLenum target = GL_ARRAY_BUFFER;

    glGenBuffers(1, &vbo);
    glBindBuffer(target, vbo);
<

------------------------------------------------------------------------------
Vertex Attrib Pointers                  *opengl:vertex-attrib-pointer*

Vertex data is placed into arrays that are stored in the server’s address
space (...). Blocks of data in these arrays may then be used to specify
multiple geometric primitives through the execution of a single GL command.
 
The VertexAttribDivisor modifies the rate at which generic vertex attributes
advance when rendering multiple instances of primitives in a single draw
call.
If divisor is zero, the attribute at slot index advances once per vertex.
If divisor is non-zero, the attribute advances once per divisor instances of
the set(s) of vertices being rendered.
An attribute is referred to as instanced if its divisor value is non-zero.
--- OpenGL 4.1. Core - (2.8)

Usage:
>glsl
    // Shader
    layout(location=0) in uvec2 attr;
<
>c
    // Client
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(
         0,
         2,
         GL_UNSIGNED_INT,
         GL_FALSE,
         2 * sizeof(unsigned int),
         (GLvoid*)0
    );
>

------------------------------------------------------------------------------
Element Buffer Object                   *opengl:ebo*

Blocks of array indices are stored in buffer objects in the formats described
by the type parameter of DrawElements (see section 2.8.3).
A buffer object is bound to ELEMENT_ARRAY_BUFFER by calling BindBuffer with
target set to ELEMENT_ARRAY_BUFFER, and buffer set to the name of the buffer
object.
--- OpenGL 4.1. Core (2.9.7)

The DrawElements function takes its indices from the EBO currently bound to
the ELEMENT_ARRAY_BUFFER target. This means we have to bind the corresponding
EBO each time we want to render an object with indices which again is a bit
cumbersome. It just so happens that a vertex array object also keeps track of
element buffer object bindings.
--- Learn OpenGL

------------------------------------------------------------------------------
Vertex Arrays Object                    *opengl:vao*

The buffer objects that are to be used by the vertex stage of the GL are
collected together to form a vertex array object. All state related to the
definition of data used by the vertex processor is encapsulated in a vertex 
array object.
--- OpenGL 4.1. Core (2.10)

A VAO stores the BindBuffer calls when the target is ELEMENT_ARRAY_BUFFER. 
This also means it stores its unbind calls so make sure you don't unbind the 
element array buffer before unbinding your VAO, otherwise it doesn't have an
EBO configured. 
--- Learn OpenGL

Example:
>glsl
    // Shader
    layout(location = 0) in vec3 attr_position;
    layout(location = 1) in vec3 attr_normal;
    layout(location = 2) in vec2 attr_tex_coordinate;
<
>c
    // Client
    unsigned int vao;
    glGenVertexArrays(1, &vao);
    glBindVertexArrays(vao);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, arrayIndices);

    // Bind appropriate buffer and enable Vertex Attributes:
    // - 0 - vertex position vec2
    // - 1 - vertex normal vec3
    bindVertexPositionAndNormals();
    // - 2 - texture coordinate vec2
    bindTextureCoordinates();

    glBindVertexArrays(0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
<

┌──VAO────────────────────────────────────────────┐
│┌──Attribute pointers─────────┐ ┌──Other State──┐│
││ Position   Normal  TexCoord │ │ □□□□□□□□□□□□□ ││
└┴────┼─────────┼─────────┼────┴─┴───────────────┴┘
      └─────────┤         └──┬──Buffer───────────────┐
 ┌──Buffer──────┴─────────┐  │Texture Coordinate data│
 │Position and Normal data│  └───────────────────────┘
 └────────────────────────┘

------------------------------------------------------------------------------
Framebuffer                             *opengl:framebuffer*

Framebuffer objects encapsulate the state of a framebuffer in a similar manner
to the way texture objects encapsulate the state of a texture. In particular,
a framebuffer object encapsulates state necessary to describe a collection of
color, depth, and stencil logical buffers (other types of buffers are not
allowed).
For each logical buffer, a framebuffer-attachable image can be attached to the
framebuffer to store the rendered output for that logical buffer. Examples of
framebuffer-attachable images include texture images and renderbuffer images.
Renderbuffers are described further in section 4.4.2.
By allowing the images of a renderbuffer to be attached to a framebuffer, the
GL provides a mechanism to support off-screen rendering.
Further, by allowing the images of a texture to be attached to a framebuffer,
the GL provides a mechanism to support render to texture.
--- OpenGL 4.1. Core (4.4)

------------------------------------------------------------------------------
Glossary

OBJECT SPACE                            *opengl:object-space*
Coordinate space that is local to object. Model matrix is responsible for
transforming to world space.

WORLD SPACE                             *opengl:world-space*
Contains objects transformed with their model matrices.

VIEW SPACE                              *opengl:view-space*
Coordinate space with camera as its origin.
If camera position in world space is given by transformation matrix M, then
transformation of objects from world space to camera space is achieved by the
inverse of M.

The view space is the result of transforming your world-space coordinates to
coordinates that are in front of the user's view. The view space is thus the 
space as seen from the camera's point of view.

NDC                                     *opengl:ndc*
Clip coordinates for a vertex result from vertex or, if active, geometry
shader execution, which yields a vertex coordinate gl_Position.
Perspective division on clip coordinates yields normalized device coordinates,
followed by a viewport transformation to convert these coordinates into window
coordinates.
--- OpenGL 4.1. Core (2.14)

>glsl
    vec4 clip_space = vec4(1.0);
    vec3 ndc_space = vec3(clip_space.xyz) / clip_space.w;
>

TRANSFORMING NORMALS                    *opengl:transforming-normals*
The solution to transforming normals is not to multiply them by the same 
matrix used for transforming points and vectors but to multiply them by the
transpose of the inverse of that matrix.
--- Scratch Pixel
    https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals.html

DEPTH TEST                              *opengl:depth-test*
Controlls visibility test.

DEPTH MASK                              *opengl:depth-mask*
Controlls depth writes.

INSTANCED DRAW                          *opengl:instanced-draw*
Use a buffer data with some regular attributes while attaching instanced
attributes via VertexAttribDivisor.
Attribute is instanced if its divisor value is not zero. >c
    // Enable vertex attribute.
    glEnableVertexAttribArray(attrIndex, /* ... */);
    // Mark attribute as instanced - advance 1 per instance.
    glVertexAttribDivisor(attrIndex, 1);
    // Draw 25 instances of figure composed of two triangles.
    glDrawElementsInstanced(
        GL_TRIANGLES,
        6,
        GL_UNSIGNED_INT,
        (GLvoid*)0,
        25
    );
<

CUBE MAP                                *opengl:cube-map*
Texture that contains 6 individual 2D textures. Note that it uses left-handed
coordinate system so the Z axis points to the front of camera.
    Texture target 	                Orientation
    GL_TEXTURE_CUBE_MAP_POSITIVE_X 	Right
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X 	Left
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y 	Top
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 	Bottom
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z 	Back
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 	Front
>c
    unsigned int textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);
    // For each face do:
    glTexImage2D(target, /* args */);
<

TEXEL                                   *opengl:texel*
Alias: texture pixel (pixel is smallest unit of digital image data).
A value at a particular point in the texture. Point sample in the texture
space.

TEXTURE FILTERING                       *opengl:filtering*
Nearest: take the color of the texel nearest to the sampled point.

Bilinear: interpolate the value of four closest texels. Can cause artifacts if
the texure is far away - multiple texels correspond to the calculated pixel.

To illustrate here is an original texture:
▒▒▒▒▒▒▒▒▒▒▒▒ (60 x 60)
▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒
And here it is in the camera space: ▦ (2 x 2 on the screen).
The problem: multiple texels (around 900) correspond to single screen pixel,
but only four texels closest to sampled point contribute to the color.
Therefore, a small change to the sampled point (from screen perspective) can
drasticly change output color.

Mipmap: pre-filtering; sequence of images with progressively lower resolution.
Used to solve the problem with bilinear filtering when multiple texels
correspond to the screen pixel which color is calculated.

Trilinear: bilinear interpolation of color value on two mipmap level texures
(one where pixel is "larger", second where pixel is "smaller" than texel) and
then interpolates again the result of mipmap interpolation.
Or, bilinear filtering between mipmap levels allows to avoid sudden
change of result color between mimap levels.
                            
Anisotropic: with mipmaps; will work like trilinear but will interpolate
texels multiple times in the area in the texture space that corresponds to the
screen pixel.

TEXTURE COORDINATES                     *opengl:texture-coordinates*
Resolution texture coordinates u, v, w (width, height, depth).
Normalized texture coordinates s, t, r (width, height, depth).
Usually, normalized coordinates are named u, v, w.

MATRIX LAYOUT                           *opengl:matrix-layout*
Defines a way that matrix data is laid out. There are two ways of ordering
data in matrix: row-major order and column-major order.
For OpenGL, one can use any notation as far as the matrix is used correctly.

Row-major order:        Column-major order:
┌             ┐         ┌             ┐
│ xᵢ yᵢ zᵢ wᵢ │         │ xᵢ xⱼ xₖ xₗ │
│ xⱼ yⱼ zⱼ wⱼ │         │ yᵢ yⱼ yₖ yₗ │
│ xₖ yₖ zₖ wₖ │         │ zᵢ zⱼ zₖ zₗ │
│ xₗ yₗ zₗ wₗ │         │ wᵢ wⱼ wₖ wₗ │
└             ┘         └             ┘
ᵢ - base vector of X axis
ⱼ - base vector of Y axis
ₖ - base vector of Z axis
ₗ - base vector of W axis

Matrix layout also defines the order of transformations.
>glsl
    vec4 vector = vec(1.0);
    // Apply transformations in row-major order.
    vec4 result = vector * scale * rotate * translate;
    // Apply transformations in column-major order.
    vec4 result = translate * rotate * scale * vector;
<

 vim: tw=78 sw=4 ts=4 ft=help norl cc=41,78 cole=0 isk+=- isk+=\\:
 vim: nu rnu tags+=$VIMRUNTIME/doc/tags tc=ignore
